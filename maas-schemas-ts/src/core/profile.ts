/*

undefined
MaaS user profiles as returned by our API

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as PointCost_ from 'maas-schemas-ts/core/components/point-cost';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as Common_ from 'maas-schemas-ts/core/components/common';
import * as Address_ from 'maas-schemas-ts/core/components/address';
import * as Region_ from 'maas-schemas-ts/core/region';
import * as Place_ from 'maas-schemas-ts/core/components/place';
import * as Fare_ from 'maas-schemas-ts/core/components/fare';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/core/profile.json';

// SubscriptionInstance
// The purpose of this remains a mystery
export type SubscriptionInstance = t.Branded<
  {
    id?: number;
    name?: string;
    plan?: {
      id?: string;
    } & {
      id: Defined;
    };
    addons?: Array<string>;
    coupons?: Array<string>;
    wmpGrant?: number;
    level?: number;
    active?: boolean;
    pointCost?: PointCost_.PointCost;
    description?: string;
    availability?: number;
  } & {
    plan: Defined;
    addons: Defined;
    coupons: Defined;
    pointCost: Defined;
  },
  SubscriptionInstanceBrand
>;
export const SubscriptionInstance = t.brand(
  t.intersection([
    t.partial({
      id: t.number,
      name: t.string,
      plan: t.intersection([
        t.partial({
          id: t.string,
        }),
        t.type({
          id: Defined,
        }),
      ]),
      addons: t.array(t.string),
      coupons: t.array(t.string),
      wmpGrant: t.number,
      level: t.number,
      active: t.boolean,
      pointCost: PointCost_.PointCost,
      description: t.string,
      availability: t.number,
    }),
    t.type({
      plan: Defined,
      addons: Defined,
      coupons: Defined,
      pointCost: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: number;
      name?: string;
      plan?: {
        id?: string;
      } & {
        id: Defined;
      };
      addons?: Array<string>;
      coupons?: Array<string>;
      wmpGrant?: number;
      level?: number;
      active?: boolean;
      pointCost?: PointCost_.PointCost;
      description?: string;
      availability?: number;
    } & {
      plan: Defined;
      addons: Defined;
      coupons: Defined;
      pointCost: Defined;
    },
    SubscriptionInstanceBrand
  > => true,
  'SubscriptionInstance',
);
export interface SubscriptionInstanceBrand {
  readonly SubscriptionInstance: unique symbol;
}

// Profile
// The default export. More information at the top.
export type Profile = t.Branded<
  {
    id?: number;
    identityId?: Units_.IdentityId;
    phone?: Common_.Phone;
    email?: Common_.Email;
    firstName?: Common_.PersonalName;
    lastName?: Common_.PersonalName;
    city?: Address_.City;
    country?: Address_.Country;
    zipCode?: Address_.ZipCode;
    regionId?: string;
    region?: Region_.Region;
    profileImageUrl?: string;
    favoriteLocations?: Array<Place_.Place>;
    paymentMethod?: {
      type?: string & ('unknown' | 'card' | 'stripe');
      valid?: boolean;
      maskedNumber?: string;
      issuer?: string;
      expiry?: Units_.Time;
    } & {
      type: Defined;
      valid: Defined;
    };
    subscription?: {};
    subscriptionInstance?: SubscriptionInstance;
    balance?: number;
    balances?: Array<Fare_.Fare>;
    created?: Units_.Time;
    modified?: Units_.Time;
  } & {
    identityId: Defined;
    phone: Defined;
    favoriteLocations: Defined;
    balance: Defined;
    paymentMethod: Defined;
    subscriptionInstance: Defined;
    balances: Defined;
  },
  ProfileBrand
>;
export const Profile = t.brand(
  t.intersection([
    t.partial({
      id: t.number,
      identityId: Units_.IdentityId,
      phone: Common_.Phone,
      email: Common_.Email,
      firstName: Common_.PersonalName,
      lastName: Common_.PersonalName,
      city: Address_.City,
      country: Address_.Country,
      zipCode: Address_.ZipCode,
      regionId: t.string,
      region: Region_.Region,
      profileImageUrl: t.string,
      favoriteLocations: t.array(Place_.Place),
      paymentMethod: t.intersection([
        t.partial({
          type: t.intersection([
            t.string,
            t.union([t.literal('unknown'), t.literal('card'), t.literal('stripe')]),
          ]),
          valid: t.boolean,
          maskedNumber: t.string,
          issuer: t.string,
          expiry: Units_.Time,
        }),
        t.type({
          type: Defined,
          valid: Defined,
        }),
      ]),
      subscription: t.type({}),
      subscriptionInstance: SubscriptionInstance,
      balance: t.number,
      balances: t.array(Fare_.Fare),
      created: Units_.Time,
      modified: Units_.Time,
    }),
    t.type({
      identityId: Defined,
      phone: Defined,
      favoriteLocations: Defined,
      balance: Defined,
      paymentMethod: Defined,
      subscriptionInstance: Defined,
      balances: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: number;
      identityId?: Units_.IdentityId;
      phone?: Common_.Phone;
      email?: Common_.Email;
      firstName?: Common_.PersonalName;
      lastName?: Common_.PersonalName;
      city?: Address_.City;
      country?: Address_.Country;
      zipCode?: Address_.ZipCode;
      regionId?: string;
      region?: Region_.Region;
      profileImageUrl?: string;
      favoriteLocations?: Array<Place_.Place>;
      paymentMethod?: {
        type?: string & ('unknown' | 'card' | 'stripe');
        valid?: boolean;
        maskedNumber?: string;
        issuer?: string;
        expiry?: Units_.Time;
      } & {
        type: Defined;
        valid: Defined;
      };
      subscription?: {};
      subscriptionInstance?: SubscriptionInstance;
      balance?: number;
      balances?: Array<Fare_.Fare>;
      created?: Units_.Time;
      modified?: Units_.Time;
    } & {
      identityId: Defined;
      phone: Defined;
      favoriteLocations: Defined;
      balance: Defined;
      paymentMethod: Defined;
      subscriptionInstance: Defined;
      balances: Defined;
    },
    ProfileBrand
  > => true,
  'Profile',
);
export interface ProfileBrand {
  readonly Profile: unique symbol;
}

export default Profile;

// Success
