/*

undefined
Product in core which encapsulates at least an id, name and a tspProductId

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Common_ from 'maas-schemas-ts/core/components/common';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/core/product.json';

// Id
// The purpose of this remains a mystery
export type Id = t.Branded<string, IdBrand>;
export const Id = t.brand(
  t.string,
  (x): x is t.Branded<string, IdBrand> =>
    (typeof x !== 'string' || x.length >= 1) &&
    (typeof x !== 'string' || x.length <= 255),
  'Id',
);
export interface IdBrand {
  readonly Id: unique symbol;
}

// Product
// The default export. More information at the top.
export type Product = t.Branded<
  {
    id?: Id;
    name?: string;
    description?: string;
    icon?: string;
    priority?: number;
    agencyId?: Common_.AgencyId;
    tspProductId?: string;
    allowFinishTrip?: boolean;
  } & {
    id: Defined;
    tspProductId: Defined;
    name: Defined;
  },
  ProductBrand
>;
export const Product = t.brand(
  t.intersection([
    t.partial({
      id: Id,
      name: t.string,
      description: t.string,
      icon: t.string,
      priority: t.number,
      agencyId: Common_.AgencyId,
      tspProductId: t.string,
      allowFinishTrip: t.boolean,
    }),
    t.type({
      id: Defined,
      tspProductId: Defined,
      name: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Id;
      name?: string;
      description?: string;
      icon?: string;
      priority?: number;
      agencyId?: Common_.AgencyId;
      tspProductId?: string;
      allowFinishTrip?: boolean;
    } & {
      id: Defined;
      tspProductId: Defined;
      name: Defined;
    },
    ProductBrand
  > => true,
  'Product',
);
export interface ProductBrand {
  readonly Product: unique symbol;
}

export default Product;

// Success
