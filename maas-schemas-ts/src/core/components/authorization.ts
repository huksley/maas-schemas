/*

undefined
MaaS information about an authorization required to use a particular TSP

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Common_ from 'maas-schemas-ts/core/components/common';
import * as Units_ from 'maas-schemas-ts/core/components/units';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/core/components/authorization.json';

// Authorization
// The default export. More information at the top.
export type Authorization = t.Branded<
  {
    agencyId?: Common_.AgencyId;
    state?: string & ('VALID' | 'INVALID');
    validTo?: Units_.Time;
    created?: Units_.Time;
    modified?: Units_.Time;
  } & {
    agencyId: Defined;
    state: Defined;
    validTo: Defined;
    created: Defined;
  },
  AuthorizationBrand
>;
export const Authorization = t.brand(
  t.intersection([
    t.partial({
      agencyId: Common_.AgencyId,
      state: t.intersection([
        t.string,
        t.union([t.literal('VALID'), t.literal('INVALID')]),
      ]),
      validTo: Units_.Time,
      created: Units_.Time,
      modified: Units_.Time,
    }),
    t.type({
      agencyId: Defined,
      state: Defined,
      validTo: Defined,
      created: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      agencyId?: Common_.AgencyId;
      state?: string & ('VALID' | 'INVALID');
      validTo?: Units_.Time;
      created?: Units_.Time;
      modified?: Units_.Time;
    } & {
      agencyId: Defined;
      state: Defined;
      validTo: Defined;
      created: Defined;
    },
    AuthorizationBrand
  > => true,
  'Authorization',
);
export interface AuthorizationBrand {
  readonly Authorization: unique symbol;
}

export default Authorization;

// Success
